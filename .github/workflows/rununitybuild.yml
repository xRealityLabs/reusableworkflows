name: Run Unity Builds

on:
  workflow_call:
    inputs:
      build-target:
        required: true
        type: string
      unityversion:
        description: "The version of Unity to validate on"
        required: true
        type: string
      projectpath:
        description: "The path to the Unity project"
        required: true
        type: string

jobs:
  run_build:
    name: Run Unity Build process
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows
            build-target: Android
          - os: windows
            build-target: Standalone
          - os: windows
            build-target: WindowsStoreApps

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          clean: true

      - id: build
        name: 'Run Unity Builds'
        run: |
          echo "::group::Script Versioning"
            $scriptVersion = '1.0.0'

            echo 'Build Script Version'
            echo $scriptVersion
          echo "::endgroup::"

          echo "::group::Warm up for Unity version"

          echo 'Unity version is ${{ inputs.unityversion }}'
          $unityVersion = '${{ inputs.unityversion }}'
          
          if([string]::IsNullOrEmpty($unityVersion))
          {
              echo 'Unity version missing, using default'
              $unityVersion = '2020.3.29f1'
          }

          if ( (-not $global:PSVersionTable.Platform) -or ($global:PSVersionTable.Platform -eq "Win32NT") ) {
            $directorySeparatorChar = "\"
            $editorRootPath = "C:/Program Files/Unity/Hub/Editor/"
            $editorFileEx = "/Editor/Unity.exe"
            $editorrunpath = $editorRootPath + $unityVersion + $editorFileEx

            function unity-editor {
              #$p = Start-Process -Verbose -NoNewWindow -PassThru -Wait -FilePath "$editorrunpath" -ArgumentList (@(' -batchmode') + $args.Split(" "))
              & $editorrunpath -batchmode $args.Split(" ") | Out-String
            }
          }
          elseif ( $global:PSVersionTable.OS.Contains("Darwin") ) {
            $directorySeparatorChar = "/"
            $editorRootPath = "/Applications/Unity/Hub/Editor/"
            $editorFileEx = "/Unity.app/Contents/MacOS/Unity"
            $editorrunpath = '$editorRootPath' + '$unityVersion' + '$editorFileEx'

            function unity-editor {
              #$p = Start-Process -Verbose -NoNewWindow -PassThru -Wait -FilePath "$editorrunpath" -ArgumentList (@(' -batchmode') + $args.Split(" "))
              & $editorrunpath -batchmode $args.Split(" ") | Out-String
            }
          }
          elseif ( $global:PSVersionTable.OS.Contains("Linux") ) {
            $directorySeparatorChar = "/"
            $editorRootPath = "$HOME/Unity/Hub/Editor/"
            $editorFileEx = "/Editor/Unity"
            $editorrunpath = '$editorRootPath' + '$unityVersion' + '$editorFileEx'

            function unity-editor {
              xvfb-run --auto-servernum "$editorrunpath" -batchmode $args.Split(" ")
            }
          }

          if ( -not (Test-Path "$editorrunpath") ) 
          {
            Write-Error "$editorrunpath path not found!"
            exit 1
          }

          if ( -not (Test-Path "${{ inputs.projectpath }}") ) 
          {
            Write-Error "${{ inputs.projectpath }} project path not found!"
            exit 1
          }
          echo "::endgroup::"

          echo "::group::Setup logging and run Unit tests"          

          # Log detail
          $logDirectory = "Logs"
          if ( -not (Test-Path -Path $logDirectory)) {
            $logDirectory = New-Item -ItemType Directory -Force -Path $logDirectory | Select-Object
          }
          echo "Log Directory: $logDirectory"
          $date = Get-Date -Format "yyyyMMddTHHmmss"

          # If run manually, the Refname is actually blank, so just use date
          if([string]::IsNullOrEmpty(${GITHUB_REF_NAME})) {
            $logName = "$logDirectory$directorySeparatorChar$date"
          }
          else{          
            $logName = "$logDirectory$directorySeparatorChar${GITHUB_REF_NAME}-$date"
          }

          $logPath = "$logName.log"

          echo "Logpath [$logPath]"
          echo "::endgroup::"

          echo "::group::Run build"              

          echo "---------------------------------------------"
          echo "Start Testing"
          echo "Unity Command\n[unity-editor -projectPath $TempUnityProjectName -logfile $logPath -batchmode -nographics -quit -buildTarget ${{ matrix.build-target }}]"

          unity-editor -projectPath $TempUnityProjectName -logfile $logPath -batchmode -nographics -quit -buildTarget ${{ matrix.build-target }}

          echo "---------------------------------------------"
          echo "::group::Unity Unit tests Results"
          if (Test-Path $testsLogPath) {
            echo "Test Run results for ${GITHUB_REPOSITORY} Branch ${GITHUB_REF}"
            echo ""
            Select-Xml -Path $testsLogPath -XPath '/test-run/test-suite' | ForEach-Object { "Name: " +$_.Node.name, ", Result: " + $_.Node.result, ", Total Tests: " + $_.Node.total, ", Passed: " + $_.Node.passed, ", Failed: " + $_.Node.failed, ", Skipped: " + $_.Node.skipped }
          }
          else {
            echo "No test results found for ${GITHUB_REPOSITORY} Branch ${GITHUB_REF} at $testsLogPath"
            echo ""
          }
          echo "::endgroup::"

          if($LASTEXITCODE -ne '0'){
          echo "::group::Unity Unit tests errors"
            $exitCode = $testResult.ExitCode
            Get-Content $logPath
            echo "Build failed due to errors ($LASTEXITCODE), please check the log at $logPath"
          echo "::endgroup::"

            exit $LASTEXITCODE
          }
          echo "::endgroup::"

        shell: pwsh